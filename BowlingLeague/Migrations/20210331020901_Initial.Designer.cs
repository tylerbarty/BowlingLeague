// <auto-generated />
using System;
using BowlingLeague.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BowlingLeague.Migrations
{
    [DbContext(typeof(BowlingLeagueContext))]
    [Migration("20210331020901_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13");

            modelBuilder.Entity("BowlingLeague.Models.BowlerScores", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnName("MatchID")
                        .HasColumnType("int");

                    b.Property<long>("GameNumber")
                        .HasColumnType("smallint");

                    b.Property<long>("BowlerId")
                        .HasColumnName("BowlerID")
                        .HasColumnType("int");

                    b.Property<long?>("HandiCapScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("RawScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("0");

                    b.Property<byte[]>("WonGame")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("MatchId", "GameNumber", "BowlerId");

                    b.HasIndex("BowlerId")
                        .HasName("BowlerID");

                    b.HasIndex("MatchId", "GameNumber")
                        .HasName("MatchGamesBowlerScores");

                    b.ToTable("Bowler_Scores");
                });

            modelBuilder.Entity("BowlingLeague.Models.Bowlers", b =>
                {
                    b.Property<long>("BowlerId")
                        .HasColumnName("BowlerID")
                        .HasColumnType("int");

                    b.Property<string>("BowlerAddress")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("BowlerCity")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("BowlerFirstName")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("BowlerLastName")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("BowlerMiddleInit")
                        .HasColumnType("nvarchar (1)");

                    b.Property<string>("BowlerPhoneNumber")
                        .HasColumnType("nvarchar (14)");

                    b.Property<string>("BowlerState")
                        .HasColumnType("nvarchar (2)");

                    b.Property<string>("BowlerZip")
                        .HasColumnType("nvarchar (10)");

                    b.Property<long?>("TeamId")
                        .HasColumnName("TeamID")
                        .HasColumnType("int");

                    b.HasKey("BowlerId");

                    b.HasIndex("BowlerLastName")
                        .HasName("BowlerLastName");

                    b.HasIndex("TeamId")
                        .HasName("BowlersTeamID");

                    b.ToTable("Bowlers");
                });

            modelBuilder.Entity("BowlingLeague.Models.MatchGames", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnName("MatchID")
                        .HasColumnType("int");

                    b.Property<long>("GameNumber")
                        .HasColumnType("smallint");

                    b.Property<long?>("WinningTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WinningTeamID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.HasKey("MatchId", "GameNumber");

                    b.HasIndex("MatchId")
                        .HasName("TourneyMatchesMatchGames");

                    b.HasIndex("WinningTeamId")
                        .HasName("Team1ID");

                    b.ToTable("Match_Games");
                });

            modelBuilder.Entity("BowlingLeague.Models.Teams", b =>
                {
                    b.Property<long>("TeamId")
                        .HasColumnName("TeamID")
                        .HasColumnType("int");

                    b.Property<long?>("CaptainId")
                        .HasColumnName("CaptainID")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar (50)");

                    b.HasKey("TeamId");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasName("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BowlingLeague.Models.Tournaments", b =>
                {
                    b.Property<long>("TourneyId")
                        .HasColumnName("TourneyID")
                        .HasColumnType("int");

                    b.Property<byte[]>("TourneyDate")
                        .HasColumnType("date");

                    b.Property<string>("TourneyLocation")
                        .HasColumnType("nvarchar (50)");

                    b.HasKey("TourneyId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("BowlingLeague.Models.TourneyMatches", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnName("MatchID")
                        .HasColumnType("int");

                    b.Property<long?>("EvenLaneTeamId")
                        .HasColumnName("EvenLaneTeamID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Lanes")
                        .HasColumnType("nvarchar (5)");

                    b.Property<long?>("OddLaneTeamId")
                        .HasColumnName("OddLaneTeamID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("TourneyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TourneyID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.HasKey("MatchId");

                    b.HasIndex("EvenLaneTeamId")
                        .HasName("Tourney_MatchesEven");

                    b.HasIndex("OddLaneTeamId")
                        .HasName("TourneyMatchesOdd");

                    b.HasIndex("TourneyId")
                        .HasName("TourneyMatchesTourneyID");

                    b.ToTable("Tourney_Matches");
                });

            modelBuilder.Entity("BowlingLeague.Models.ZtblBowlerRatings", b =>
                {
                    b.Property<string>("BowlerRating")
                        .HasColumnType("nvarchar (15)");

                    b.Property<long?>("BowlerHighAvg")
                        .HasColumnType("smallint");

                    b.Property<long?>("BowlerLowAvg")
                        .HasColumnType("smallint");

                    b.HasKey("BowlerRating");

                    b.ToTable("ztblBowlerRatings");
                });

            modelBuilder.Entity("BowlingLeague.Models.ZtblSkipLabels", b =>
                {
                    b.Property<long>("LabelCount")
                        .HasColumnType("int");

                    b.HasKey("LabelCount");

                    b.ToTable("ztblSkipLabels");
                });

            modelBuilder.Entity("BowlingLeague.Models.ZtblWeeks", b =>
                {
                    b.Property<byte[]>("WeekStart")
                        .HasColumnType("date");

                    b.Property<byte[]>("WeekEnd")
                        .HasColumnType("date");

                    b.HasKey("WeekStart");

                    b.ToTable("ztblWeeks");
                });

            modelBuilder.Entity("BowlingLeague.Models.BowlerScores", b =>
                {
                    b.HasOne("BowlingLeague.Models.Bowlers", "Bowler")
                        .WithMany("BowlerScores")
                        .HasForeignKey("BowlerId")
                        .IsRequired();
                });

            modelBuilder.Entity("BowlingLeague.Models.Bowlers", b =>
                {
                    b.HasOne("BowlingLeague.Models.Teams", "Team")
                        .WithMany("Bowlers")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BowlingLeague.Models.MatchGames", b =>
                {
                    b.HasOne("BowlingLeague.Models.TourneyMatches", "Match")
                        .WithMany("MatchGames")
                        .HasForeignKey("MatchId")
                        .IsRequired();
                });

            modelBuilder.Entity("BowlingLeague.Models.TourneyMatches", b =>
                {
                    b.HasOne("BowlingLeague.Models.Teams", "EvenLaneTeam")
                        .WithMany("TourneyMatchesEvenLaneTeam")
                        .HasForeignKey("EvenLaneTeamId");

                    b.HasOne("BowlingLeague.Models.Teams", "OddLaneTeam")
                        .WithMany("TourneyMatchesOddLaneTeam")
                        .HasForeignKey("OddLaneTeamId");

                    b.HasOne("BowlingLeague.Models.Tournaments", "Tourney")
                        .WithMany("TourneyMatches")
                        .HasForeignKey("TourneyId");
                });
#pragma warning restore 612, 618
        }
    }
}
